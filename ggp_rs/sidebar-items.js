initSidebarItems({"fn":[["run","Starts a GGP player listening at `host`"]],"macro":[["check_time!","Checks whether we are out of time, and if so, returns the move selected by `Player::out_of_time`."],["check_time_result!","Checks whether we are out of time, and if so, returns the move selected by `Player::out_of_time` wrapped in a `MoveResult`."]],"mod":[["player","Ready to use GGP players"]],"struct":[["Game","A description of a game. The methods of this object use a logic prover to find all true statements that satisfy a given query (i.e. find all legal moves). Note that queries are cached, so calling a method that performs a query twice will only pay for any necessary clones, another query will not be performed."],["Move","A move in a game"],["Role","A role in a game"],["State","The state of a game, containing all `Sentence`s that are true in this state"]],"trait":[["Player","A GGP player"]],"type":[["MoveResult","This type meant to be used in GGP players for returning a move when time runs out. For functions that would normally have a return type `T`, you can return a `MoveResult<T>` instead. On normal execution, an `Ok(T)` can be returned, and when out of time an `Err(Move)` can be returned. You can implement this logic yourself or just use the provided `check_time_result!` macro."],["Score","The score a player can get at a goal state"]]});